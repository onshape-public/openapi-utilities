name: Generate Bindings
on:
  workflow_call:
    secrets:
      BOT_ACCESS_TOKEN:
        required: true
      ONSHAPE_API_ACCESS_KEY:
        required: true
      ONSHAPE_API_SECRET_KEY:
        required: true

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_ACCESS_TOKEN }}
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install json CLI
        run: npm install -g json
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Install goimports CLI
        run: go install golang.org/x/tools/cmd/goimports@latest
      - name: Download OpenAPI generator
        run: |
          generatorUrl=$(cat ${{ github.workspace }}/bindgen-config.json | json generate.generatorUrl)
          wget "${generatorUrl}" -O ${{ github.workspace }}/openapi-generator-cli.jar
      - name: Download custom generator
        run: |
          generatorUrl=$(cat ${{ github.workspace }}/bindgen-config.json | json generate.customGeneratorUrl)
          wget "${generatorUrl}" -O ${{ github.workspace }}/go-oapi-codegen.jar
      - name: Preprocess specification
        id: ps
        run: |
          repo=${{ github.workspace }}
          if [ -z "$repo" ]; then
            repo=$PWD
          fi

          cat ${repo}/openapi.json > ${repo}/openapi.json.tmp
          preprocessCount=$(cat ${repo}/bindgen-config.json | json generate.preprocess.length)
          for (( i=0; i<$preprocessCount; i++))
          do
            current=$(cat ${repo}/bindgen-config.json | json generate.preprocess.$i)
            key=$(echo "${current}" | json key)
            type=$(echo "${current}" | json type)
            value=$(echo "${current}" | json value)
            valueIsString=$(echo "${current}" | json -e "console.log(typeof this.value === 'string')" | head -n 1)
            if [ $valueIsString = true ]; then
              value='"'${value}'"'
            fi
            if [ $type = remove ]; then
              json -I -f ${repo}/openapi.json.tmp -e 'try { this.'"${key}"'=undefined; } catch(err) { console.log("Could not remove key: '${key}'"); }'
            elif [ $type = update ]; then
              json -I -f ${repo}/openapi.json.tmp -e 'try { this.'"${key}"'='"${value}"'; } catch(err) { console.log("Could not update key: '${key}'"); }'
            else
              echo Unknown preprocessor replacement type "${type}" for key "${key}"
              exit 1
            fi
          done
          changedVersion=$(cat ${repo}/openapi.json | json info.version)
          echo "change=${changedVersion}" >> $GITHUB_OUTPUT
      - name: Remove old files
        run: |
          artifacts=$(cat ./onshape/.openapi-generator-ignore | grep "^[^#]")
          if ! [ -z "$artifacts" ]; then
           artifactOutput='-name .openapi-generator-ignore'
           while IFS= read -r line; do
              if ! [ -z "$line" ]; then
               artifactOutput="${artifactOutput}"' -o -name '"${line}"
              fi
           done <<< "${artifacts}"
           cd ./onshape
           find . -type f ! \( ${artifactOutput} \) -delete
           cd ./..
          fi
      - name: Generate bindings
        id: gb
        run: |
          repo=${{ github.workspace }}
          packageVersion=${{ steps.ps.outputs.change }}

          if [ -z "$repo" ]; then
            repo=$PWD
          fi

          if [ -z "$packageVersion" ]; then
            packageVersion=0.0.0
          fi

          java -cp ${repo}/go-oapi-codegen.jar:${repo}/openapi-generator-cli.jar org.openapitools.codegen.OpenAPIGenerator generate -i ${repo}/openapi.json.tmp -g go-oapi-codegen -o ${repo}/onshape --type-mappings DateTime=JSONTime --additional-properties=packageVersion=${packageVersion} --additional-properties=useOneOfDiscriminatorLookup=true --additional-properties=enumClassPrefix=true --api-name-suffix=Api --global-property apiTests=false -c ${repo}/openapi_config.json
          goimports -w ${repo}/onshape

          rm openapi.json.tmp
          rm ${{ github.workspace }}/openapi-generator-cli.jar
          git add --all
          if [[ `git status --porcelain` ]]; then
           echo "changes-occurred=true" >> $GITHUB_OUTPUT
           echo 'Changes occured; creating pull request.'
          else
           echo 'No new changes; bindings are the same.'
          fi
      - name: Update go mods
        id: ugm
        if: ${{ steps.gb.outputs.changes-occurred }}
        run: |
          go get -u ${{ github.workspace }}/...
          go mod tidy

          if [[ $(git status --porcelain go.mod go.sum) ]]; then
            echo 'Go modules updated'
            git add go.mod go.sum
          fi
      - name: Create pull request
        if: ${{ steps.gb.outputs.changes-occurred }}
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          branch: ${{ github.ref }}
          delete-branch: true
          title: Bindings for Onshape ${{ steps.ps.outputs.change }}
          commit-message: Generate bindings for Onshape ${{ steps.ps.outputs.change }}
          token: ${{ secrets.BOT_ACCESS_TOKEN }}
      - name: Wait for checks to pass
        if: ${{ steps.gb.outputs.changes-occurred }}
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-build
        with:
          token: ${{ secrets.BOT_ACCESS_TOKEN }}
          checkName: test / test
          ref: ${{ steps.cpr.outputs.pull-request-head-sha }}
      # TODO: for testing purpose, uncomment
      # - name: Merge pull request
      #   if: (steps.gb.outputs.changes-occurred && steps.wait-for-build.outputs.conclusion == 'success')
      #   uses: juliangruber/merge-pull-request-action@v1
      #   with:
      #     github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
      #     number: ${{ steps.cpr.outputs.pull-request-number }}
      # - name: Create version tag
      #   if: (steps.gb.outputs.changes-occurred && steps.wait-for-build.outputs.conclusion == 'success')
      #   run: |
      #     git fetch --all
      #     git reset --hard origin/${{ github.ref_name }}
      #     git tag -f v${{ steps.ps.outputs.change }}
      #     git push -f origin --tags
